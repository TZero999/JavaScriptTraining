JavaScript - язык с сильным функционально-ориентированным уклоном.
Он даёт нам много свободы.

Функция может быть:
1) динамически создана;
2) скопирована в другую переменную;
3) передана как аргумент другой функции.

Нам известно, что функция может получить доступ к переменным из внешнего окружения, эта возможность используется часто.

Но что произойдёт, если внешние переменные изменятся?
Функция получит последнее значение или то, которое существовало на момент создания функции?

Что произойдёт, когда функция переместится в другое место в коде и будет вызвана уже оттуда?
Она получит доступ к внешним переменным своего нового местоположения?

Разные языки в таких ситуациях ведут себя по-разному.

- Несколько вопросов:
Рассмотрим 2 ситуации, а зачем изучим внутренние механизмы шаг за шагом.

1) Функция sayHi использует внешнюю переменную name. Какое имя будет в алерте следующего кода?
    let name = "John";
    function sayHi() {
    alert("Hi, " + name);
}
name = "Pete";
sayHi(); //# что будет показано: "John" или "Pete"?

Это - частая ситуация в браузерной и серверной разработке.
Выполнение функции может быть запланировано куда позже, чем её создание.

2) Функция makeWorker создаёт другую функцию и возвращает её. Новая функция может быть вызвана откуда-то ещё.
Она получит доступ к внешним переменным из места своего создания или места выполнения? Или из обоих мест?

function makeWorker() {
    let name = "Pete";
    return function() {
    alert(name);
    };
  }

  let name = "John";
  let work = makeWorker(); //# create a function

work(); // что будет показано? "Pete" (из места создания) или "John" (из места выполнения)

- Лексическое окружение. Что такое переменная?

В JS у каждой выполняемой функции, блока кода и самого скрипта есть связанный с ними внутренний (скрытый) объект - "Лексическое окружение"

Этот объект - LexicalEnvironment - состоит из двух частей:
1) EnvironmentRecord - объект, в котором хранятся локальные переменные (а ещё this и др.)
2) Ссылка на "внешнее лексическое окружение" - ссылка на код, находящийся снаружи фигурных скобок.

Переменная - это СВОЙСТВО специального внутреннего объекта - "EnvironmentRecord".
"Получить/ изменить переменную" = "Получить/ изменить свойство объекта EnvironmentRecord".

В коде "let phrase = 'Hello'" только одно лексическое окружение, внешнего окружения нет.
Это - глобальное лексическое окружение, связанное со всем скриптом.

А вот если мы напишем так:
  let phrase;
  phrase = 'Hello';
phrase = 'Bye';

Здесь обсуждение хода работы лексического окружения лучше разделить на 4 части:
1) В начале скрипта лексическое окружение пустое;
2) Появляется определение переменной phrase. Значение не присвоено, поэтому оно undefined;
3) Переменной phrase присваивается значение 'Hello';
4) Переменная phrase меняет значение на 'Bye'.

Итог:
* "Переменная" - всего-навсего свойство специального внутреннего объекта, связанного текущим блоком/ функцией/ скриптом.
* Работа с переменными - это работа со свойствами объекта.

