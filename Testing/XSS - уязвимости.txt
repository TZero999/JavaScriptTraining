XSS - Cross-Site Scripting
Распространённая уязвимость, опасна для веб-приложений.

Суть - злоумышленник внедряет на веб-страницу JS-код.
Код выполняется, когда жертва заходит на ту же самую страницу.

- Почему с этим надо быть осторожным?
Тестирование XSS всех сайтов подряд - незаконное и подсудное дело.
Если говорить про действующие российские законы - когда исследователь тестирует чужой продукт на предмет уязвимостей
или проникает в чужую сеть без ведома и согласия владельца - его действия могут быть расценены как неправомерные.

- Логика работы уязвимости?
Код внедряется  на сайт несколькими способами:

1) Просто добавить JS-код в поле ввода текстовой информации.
В таком случае уязвимость сработает, если в этом месте текст не "экранируется" -
текст управляющих символов не заменяется на соответствующие текстовые подстановки.

2) Второй способ - добавление JS-кода напрямую в виде GET-параметра.

Как это работает?
Например, у нас есть сайт с поиском. При вводе чего-либо (пускай будет XXX) в поиск нас редиректит на страницу “?q=XXX”.
В сам параметр q можно подставить любой JS-код. Он будет подставлен в текст результата запроса и исполнен.
Осталось лишь прислать такую ссылку жертве и ждать, когда она по ней перейдёт.

Как и в прошлый раз это сработает, только если текст НЕ ЭКРАНИРУЕТСЯ.

- Почему эти уязвимости распространены?

1) Программисты могут не помнить всех мест, где пользователь вводит текст самостоятельно;
2) Браузеры понимают всё, что находится между тегами <script>, <style> и т.д. как коды JS/ CSS/ HTML;
3) Разные части сайта могут быть написаны разными программистами.

- В чём конкретно опасность?

Вариантов действий с XSS - уйма.
Самый просто пример - кража cookies. Часто веб сайты с авторизацией используют cookie для того, чтобы отличить 
авторизованного пользователя. Получается, что от значения cookie зависит, какой именно аккаунт авторизован.

Все cookie хранятся на пк пользователя.
Мы можем внедрить JS-код, позволяющий увидеть cookie пользователя, который авторизован на сайте.

Если настроена автоматическая отправка cookie - он отправляется в GET-параметрах на сайт злоумышленника.
Например, запрос уйдёт на  www.zloy.ru/stolen={значение cookie жертвы}
Сайт злоумышленника будет логировать запросы вместе с URL, по которому запрос пришёл.
В этих логах и будут копиться чужие cookie.

- Как бороться с XSS и где искать уязвимости?

1) Стоит проверять все места, в которые пользователь может внедрять свой контент.
Если он может добавить текст - сможет добавить и JS-код.

2) Один из способов защиты - "экранирование строки".
Текст обрабатывается таким образом, что браузер воспринимает текст именно как текст,
который надо просто отобразить.

3) Можно запретить JS-скриптам видеть некоторые cookie. 
Для этого у cookie есть специальный параметр "http only".

4) При помощи HTTP-заголовка "Content-Security-Policy" запретить JS делать запросы
на домен, отличный от текущего. Тогда злоумышленник не получит информацию на свой сайт.
