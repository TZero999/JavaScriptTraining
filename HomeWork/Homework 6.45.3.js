/* Задача: Числа Фибоначчи. Важность: 5.

Последовательность чисел Фибоначчи определяется формулой Fn = Fn-1 + Fn-2.
То есть, следующее число получается как сумма двух предыдущих.

Первые два числа равны 1, затем 2(1+1), затем 3(1+2), 5(2+3) и так далее: 1, 1, 2, 3, 5, 8, 13, 21....

Числа Фибоначчи тесно связаны с золотым сечением и множеством природных явлений вокруг нас.
Напишите функцию fib(n) которая возвращает n-е число Фибоначчи.
 
P.S. Все запуски функций из примера выше должны работать быстро. Вызов fib(77) должен занимать не более доли секунды.
*/

let n = +prompt("Введите n для вычисления числа Фибоначчи: ","");

alert (`${n}-ое число Фибоначчи: ${fib(n)}`);


// Вот код для рекурсии, который может напрашиваться здесь, как сам-собой разумеющийся. 
function fib2(n) {
return (n<=1) ? n : (fib2(n-1) + fib2(n-2));
}

/* Но есть проблема. Общее число повторных вычислений одного и того же числа растёт далеко не в арифметической прогрессии.
Потому вычисление, например, того же fib(77) потребует такое количество вычислений, что "положит" браузер, а с ним и процессор.

Поэтому пойдём по пути циклов:
*/

function fib(n) {
let a = 1;
let b = 1;

for (let i = 3 ; i <= n ; i++ ) {
    let c = a + b;
    a = b;
    b = c;
}
return b;
}
/*
Цикл начинается с i=3, потому что первое и второе значения последовательности заданы a=1, b=1.
Иначе будет ошибка.
*/

/* А ещё есть очень неплохое решение от одного комментатора:

function fib(n, prev1 = 0, prev2 = 1) {
return n == 1 ? prev2 : fib(--n, prev2, prev2 + prev1);
}

Здесь как раз и происходит сохранение результатов в переменные, из-за чего операция выполняется моментально.
*/