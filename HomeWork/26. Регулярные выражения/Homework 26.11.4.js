/* Задание: Разобрать выражение
Арифметическое выражение включает два числа и оператор между ними. Например:

    1 + 2
    1.2 * 3.4
    -3 / -6
    -2 - 2

Оператором может быть: "+", "-", "*" или "/".

В выражении могут быть пробелы в начале, в конце или между частями выражения.

Создайте функцию parse(expr), которая принимает выражение и возвращает массив из трёх элементов:

    Первое число.
    Оператор.
    Второе число.
*/

let [a, op, b] = parse("1.2 * 3.4");

alert('a = ', a);           // a = 1.2
alert('operand = ', op);    // operand = *
alert('b = ', b);           // b = 3.4
alert('\n');                // Пустая строка (пригодится попозже)

function parse(expr) {
    let regexp = /(\-?\d\.?\d?) ([\*\+\-\/]) (\-?\d\.?\d?)/;
    let a = expr.match(regexp)[1];
    let op = expr.match(regexp)[2];
    let b = expr.match(regexp)[3];

  return [a, op, b]
}

// Решение - мой первый, невероятно простой, вариант.

// Автор предлагает нам пойти куда более сложным путём:
// regexp = /(-?\d+(\.\d+)?)\s*([-+*/])\s*(-?\d+(\.\d+)?)/

/*
Результат result включает в себя:
    result[0] == "1.2 + 12" (полное совпадение)
    result[1] == "1.2" (первая группа (-?\d+(\.\d+)?) – первое число, включая десятичную часть)
    result[2] == ".2" (вторая группа (\.\d+)? – первая десятичная часть)
    result[3] == "+" (третья группа ([-+*\/]) – оператор)
    result[4] == "12" (четвёртая группа (-?\d+(\.\d+)?) – второе число)
    result[5] == undefined (пятая группа (\.\d+)? – вторая десятичная часть отсутствует, поэтому значение undefined)
*/

/*
Дальше автор говорит, что больно уж много совпадений нашлось и результат надо бы почистить.

Первый элемент массива (полное совпадение) он удаляет при помощи сдвига массива result.shift().
Группы, которые содержат десятичную часть (номер 2 и 4) (.\d+) убираются из массива добавлением "?:".
*/



/*
Ну а здесь небольшая интерпртеация:

Попытка вспомнить, как же работают методы массивов и перебираемых объектов, а также проверка на некорректный ввод.
*/

let array  = [
    '1 + 2',
    '1.2 * 3.4',
    '-3 / -6',
    '-2 - 2',
    '2'
]

for (let value of array){
[a, op, b] = parse(value);
alert('a = ', a);           // a = \d
alert('operand = ', op);    // operand = [-*+/]
alert('b = ', b);           // b = \d
alert('\n');                // Пустая строка
}

function parse(expr) {
    let regexp = /(\-?\d\.?\d?) ([\*\+\-\/]) (\-?\d\.?\d?)/;
    let result = expr.match(regexp);

    if (!result) {alert('Некорректная вводная.'); return result = [];}

    result.shift();
    return result;
}

