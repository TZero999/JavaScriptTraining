/* Задание: Проверьте MAC-адрес.

MAC-адрес сетевого интерфейса состоит из 6-ти двузначных шестнадцатеричных чисел,
разделённых двоеточиями: '01:32:54:67:89:AB'.

Напишите регулярное выражение, которое проверит, является ли строка MAC-адресом.
*/

let regexp = /^([0-9a-f]{2}:){5}[0-9a-f]{2}$/i;
alert( regexp.test('01:32:54:67:89:AB') );          // Положительный тест, true
alert( regexp.test('0132546789AB') );               // false (нет двоеточий)
alert( regexp.test('01:32:54:67:89') );             // false (5 чисел)
alert( regexp.test('01:32:54:67:89:24:58') )        // false (7 чисел)
alert( regexp.test('01:32:54:67:89:ZZ') )           // false (ZZ в конце строки)
alert( regexp.test('01:32:54:67:89:553') )          // false (3 цифры в конце строки)

/*
Интересная ситуация:
Изначально мой шаблон выглядел так: regexp = /\b([0-9a-f]{2}:){5}[0-9a-f]{2}\b/i.
Он идеально находил все совпадения, но так и не смог справиться с проверкой
на 7 чисел ('01:32:54:67:89:24:58'), идущих подряд.

Всё потому, что \b - проверка на "границу слова". Она "ищет" только символы категории \w.
Пример: alert( "Hello, Java!".match(/\bJava!\b/) ); // null (нет совпадения), восклицательный знак = символ.

Поэтому "граница" не сработала для примера с 7-ой комбинацией цифр. 
Однако для случая с тремя цифрами в последней строке \b сработает как надо.
*/