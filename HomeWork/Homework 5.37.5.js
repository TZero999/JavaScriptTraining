/* Задача:

У нас есть массив строк arr. Нужно получить отсортированную копию, но оставить arr неизменённым.

Создайте функцию copySorted(arr), которая будет возвращать такую копию.

let arr = ["HTML", "JavaScript", "CSS"];

let sorted = copySorted(arr);

alert( sorted ); // CSS, HTML, JavaScript
alert( arr ); // HTML, JavaScript, CSS (без изменений)

*/

let arr = [" HTML", " JavaScript", " CSS", " ECMA", " V8", " 404"];
let sorted = copySorted(arr);

console.log( "Mod: " + sorted ); // Mod:  404, CSS, ECMA, HTML, JavaScript, V8
console.log( "Origin: " + arr ); // Origin:  HTML, JavaScript, CSS, ECMA, V8, 404 (без изменений)

function copySorted(arr) {
    mod = arr.concat()
    mod.sort( (a, b) => a.localeCompare(b) );
    return mod;
}

/*
Вновь новые трюки от автора в его решении.
Сразу SLICE для копирования и в одной строке SORT для сортировки.

В одной строке 2 команды меня не удивили, я сделал так изначально:
mod = arr.concat().sort( (a, b) => a.localeCompare(b) );

Но потом решил, что это выглядит запутанно и разделил строки.

А вот про метод slice() без аргументов - саовсем забыл.
*/

//----------------------------------------------------------------------------------------------------------------------------------

/*
Вот ответ автора:

function copySorted(arr) {
  return arr.slice().sort();
}

let arr = ["HTML", "JavaScript", "CSS"];
let sorted = copySorted(arr);

alert( sorted );
alert( arr );
*/

//----------------------------------------------------------------------------------------------------------------------------------

/*
Про slice() - я забыл.
Вот текст учебника по этому поводу:
Можно вызвать slice и вообще без аргументов: arr.slice() создаёт копию массива arr.
Это часто используют, чтобы создать копию массива для дальнейших преобразований, которые не должны менять исходный массив.

А вот, что сказано про concat:
concat
Метод arr.concat создаёт новый массив, в который копирует данные из ДРУГИХ МАССИВОВ и ДОПОЛНИТЕЛЬНЫЕ ЗНАЧЕНИЯ.
В общем применение concat тут не оправдано, т.к. нам надо просто скопировать весь массив. 
*/

